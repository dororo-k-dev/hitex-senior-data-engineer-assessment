name: HITEx Data Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  GCP_REGION: 'us-central1'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements-test.txt
    
    - name: Run pytest with coverage
      run: |
        pytest tests/ --cov=dags --cov=plugins --cov-fail-under=90 --cov-report=xml --cov-report=html --cov-report=term-missing -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install code quality tools
      run: |
        pip install black pylint flake8 isort
        pip install -r requirements/requirements-test.txt
        
    - name: Run Black (must exit 0)
      run: |
        black dags/ plugins/ tests/ --check --diff
    
    - name: Run pylint (score â‰¥ 8.0)
      run: |
        pylint dags/ plugins/ --fail-under=8.0 --output-format=text
    
    - name: Run isort
      run: |
        isort dags/ plugins/ tests/ --check-only --diff
    
    - name: Run flake8
      run: |
        flake8 dags/ plugins/ tests/ --max-line-length=100

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: airflow
          POSTGRES_USER: airflow
          POSTGRES_DB: airflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements/requirements-test.txt
    
    - name: Run Docker Compose Test
      run: |
        export AIRFLOW_UID=50000
        docker-compose -f docker-compose.test.yml up -d
        sleep 60
        
        # Check if services are healthy
        docker-compose -f docker-compose.test.yml ps
        
        # Test DAG import
        docker-compose -f docker-compose.test.yml exec -T airflow-webserver airflow dags list
        
        # Test specific DAG
        docker-compose -f docker-compose.test.yml exec -T airflow-webserver airflow dags test hitex_csv_to_dw 2024-01-01
        
        docker-compose -f docker-compose.test.yml down

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r dags/ plugins/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  deploy:
    runs-on: ubuntu-latest
    needs: [test, code-quality, integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Deploy DAGs to Cloud Composer
      env:
        COMPOSER_BUCKET: ${{ secrets.COMPOSER_BUCKET }}
        GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      run: |
        # Upload DAGs
        gsutil -m cp -r dags/* gs://$COMPOSER_BUCKET/dags/
        
        # Upload plugins
        gsutil -m cp -r plugins/* gs://$COMPOSER_BUCKET/plugins/
        
        # Upload SQL scripts
        gsutil -m cp -r sql/* gs://$COMPOSER_BUCKET/data/sql/
    
    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: ' HITEx Data Platform deployed successfully to production'
    
    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: ' HITEx Data Platform deployment failed'